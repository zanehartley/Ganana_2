import time

from torch.autograd import Variable
from torch.utils.data import DataLoader, random_split

from models.cyclegan_model import cycleGAN
from models.unet_model import UNet
from dataset import GananaDataset

from visualiser import Visualiser

#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#
#               Create Dataset
#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#

#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#
#                Create Model
#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#



#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#
#              Hyperparameters
#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#

data_root = '/db/pszaj/proj-3d-plant/volumetric-cyclegan/'

image_size = 256
batch_size = 4
n_res_blocks = 9

# hyperparams for Adam optimizer
lr = 0.0002
beta1 = 0.5
beta2 = 0.999 # default value

# hyperparams for SteLR optimizer
lr_silnet = 1e-3
step_size = 2
gamma = 0.2

epoch_count = 1
n_epochs = 100
n_epochs_decay = 100

gpu_ids = [0]

no_dropout = True

print_freq = 100
display_freq = 100
update_html_freq = 1000
display_id = -1

save_latest_freq = 5000
save_by_iter = False
save_epoch_freq = 5

name = "Ganana_Test"

#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#
#                   Main
#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#

dataset = GananaDataset(data_root)  # create a dataset 
dataset_size = len(dataset)    # get the number of images in the dataset.
dataloader = DataLoader(dataset, batch_size=4, shuffle=True, num_workers=8, pin_memory=True)
print('The number of training images = %d' % dataset_size)

model = cycleGAN(name=name)      # create a model
model.setup(n_epochs, n_epochs_decay)               # regular setup: load and print networks; create schedulers
visualizer = Visualiser(name=name)   # create a visualizer that display/save images and plots
total_iters = 0                # the total number of training iterations

for epoch in range(epoch_count, n_epochs + n_epochs_decay + 1):    # outer loop for different epochs; we save the model by <epoch_count>, <epoch_count>+<save_latest_freq>
    epoch_start_time = time.time()  # timer for entire epoch
    iter_data_time = time.time()    # timer for data loading per iteration
    epoch_iter = 0                  # the number of training iterations in current epoch, reset to 0 every epoch
    visualizer.reset()              # reset the visualizer: make sure it saves the results to HTML at least once every epoch

    for i, data in enumerate(dataset):  # inner loop within one epoch
        iter_start_time = time.time()  # timer for computation per iteration
        if total_iters % print_freq == 0:
            t_data = iter_start_time - iter_data_time

        total_iters += batch_size
        epoch_iter += batch_size
        model.set_input(data)         # unpack data from dataset and apply preprocessing
        model.optimize_parameters()   # calculate loss functions, get gradients, update network weights

        if total_iters % display_freq == 0:   # display images on visdom and save images to a HTML file
            save_result = total_iters % update_html_freq == 0
            model.compute_visuals()
            visualizer.display_current_results(model.get_current_visuals(), epoch, save_result)

        if total_iters % print_freq == 0:    # print training losses and save logging information to the disk
            losses = model.get_current_losses()
            t_comp = (time.time() - iter_start_time) / batch_size
            visualizer.print_current_losses(epoch, epoch_iter, losses, t_comp, t_data)
            if display_id > 0:
                visualizer.plot_current_losses(epoch, float(epoch_iter) / dataset_size, losses)

        if total_iters % save_latest_freq == 0:   # cache our latest model every <save_latest_freq> iterations
            print('saving the latest model (epoch %d, total_iters %d)' % (epoch, total_iters))
            save_suffix = 'iter_%d' % total_iters if save_by_iter else 'latest'
            model.save_networks(save_suffix)

        iter_data_time = time.time()
    if epoch % save_epoch_freq == 0:              # cache our model every <save_epoch_freq> epochs
        print('saving the model at the end of epoch %d, iters %d' % (epoch, total_iters))
        model.save_networks('latest')
        model.save_networks(epoch)

    print('End of epoch %d / %d \t Time Taken: %d sec' % (epoch, n_epochs + n_epochs_decay, time.time() - epoch_start_time))
    model.update_learning_rate()                     # update learning rates at the end of every epoch.
